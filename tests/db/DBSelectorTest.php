<?php

namespace Asymptix\DB;

use \User;

require_once("../conf/Config.php");
require_once("../modules/dbconnection.module.php");

require_once("../db/access/User.php");

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-03 at 19:52:12.
 */
class DBSelectorTest extends \PHPUnit_Framework_TestCase {

    const EMAIL_EXISTS = "dmytro.zarezenko@gmail.com";
    const EMAIL_NOT_EXISTS = "not-exists@gmail.com";

    /**
     * @var DBSelector
     */
    protected $object;

    protected $user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new DBSelector(new User());
        $this->user = $this->object->selectDBObjectByField('email', self::EMAIL_EXISTS);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::reset
     * @todo   Implement testReset().
     */
    public function testReset() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::setConditions
     * @todo   Implement testSetConditions().
     */
    public function testSetConditions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObject
     * @todo   Implement testSelectDBObject().
     */
    public function testSelectDBObject_Exists() {
        $selector = new DBSelector(new User());
        $selector->conditions = "role = 1 AND email = '" . self::EMAIL_EXISTS . "'";
        $user = $selector->selectDBObject();

        $this->assertInstanceOf("User", $user, "Not an instanse of User class");
        $this->assertEquals(self::EMAIL_EXISTS, $user->email);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObject
     * @todo   Implement testSelectDBObject().
     */
    public function testSelectDBObject_NotExists() {
        $selector = new DBSelector(new User());
        $selector->conditions = "role = 1 AND email = '" . self::EMAIL_NOT_EXISTS . "'";
        $user = $selector->selectDBObject();

        $this->assertNull($user);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObjectByField
     * @todo   Implement testSelectDBObjectByField().
     */
    public function testSelectDBObjectByField_Exists() {
        $selector = new DBSelector(new User());
        $selector->conditions = "role = 1";
        $user = $selector->selectDBObjectByField('email', self::EMAIL_EXISTS);

        $this->assertInstanceOf("User", $user, "Not an instanse of User class");
        $this->assertEquals(self::EMAIL_EXISTS, $user->email);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObjectByField
     * @todo   Implement testSelectDBObjectByField().
     */
    public function testSelectDBObjectByField_NotExists() {
        $selector = new DBSelector(new User());
        $selector->conditions = "role = 1";
        $user = $selector->selectDBObjectByField('email', self::EMAIL_NOT_EXISTS);

        $this->assertNull($user);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObjectById
     * @todo   Implement testSelectDBObjectById().
     */
    public function testSelectDBObjectById() {
        $selector = new DBSelector(new User());
        $user = $selector->selectDBObjectById($this->user->id);

        $this->assertInstanceOf("User", $user, "Not an instanse of User class");
        $this->assertEquals($this->user, $user);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObjects
     * @todo   Implement testSelectDBObjects().
     */
    public function testSelectDBObjects() {
        $selector = new DBSelector(new User());
        $users = $selector->selectDBObjects();

        $this->assertTrue(is_array($users));
        $this->assertTrue(isset($users[$this->user->id]));
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::selectDBObjectsByField
     * @todo   Implement testSelectDBObjectsByField().
     */
    public function testSelectDBObjectsByField() {
        $selector = new DBSelector(new User());
        $users = $selector->selectDBObjectsByField('email', $this->user->email);

        $this->assertTrue(is_array($users));
        $this->assertEquals(1, count($users));
        $this->assertTrue(isset($users[$this->user->id]));
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::count
     * @todo   Implement testCount().
     */
    public function testCount() {
        $selector = new DBSelector(new User());
        $selector->conditions = "email = '" . $this->user->email . "'";

        $this->assertEquals(1, $selector->count());

        $selector->conditions = "email = '" . self::EMAIL_NOT_EXISTS . "'";

        $this->assertEquals(0, $selector->count());
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::max
     * @todo   Implement testMax().
     */
    public function testMax() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::min
     * @todo   Implement testMin().
     */
    public function testMin() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::__call
     * @todo   Implement test__call().
     */
    public function testMagic_DBObjectById() {
        $selector = new DBSelector(new User());
        $user = $selector->selectUserById($this->user->id);

        $this->assertEquals($this->user, $user);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::__call
     * @todo   Implement test__call().
     */
    public function testMagic_DBObjectByField() {
        $selector = new DBSelector(new User());
        $user = $selector->selectUserByEmail($this->user->email);

        $this->assertEquals($this->user, $user);
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::__call
     * @todo   Implement test__call().
     */
    public function testMagic_DBObjects() {
        $selector = new DBSelector(new User());
        $selector->conditions  = User::ID_FIELD_NAME . " = " . $this->user->id;

        $users = $selector->selectUsers();

        $this->assertTrue(is_array($users));
        $this->assertEquals(1, count($users));
        $this->assertTrue(isset($users[$this->user->id]));
    }

    /**
     * @covers \Asymptix\Core\DB\DBSelector::__call
     * @todo   Implement test__call().
     */
    public function testMagic_AllDBObjects() {
        $selector = new DBSelector(new User());
        $users = $selector->selectAllUsers();

        $this->assertTrue(is_array($users));
    }

}
